           /////////////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                                     //
         //                                                                                                     //
        // Project: Project5                                                                                   //
       // File Name: Driver                                                                                   //
      // Description:                                                                                        //
     // Course: CSCI 1260 – Introduction to Computer Science II                                             //
    // Author: Scotty Snyder, snyderds@etsu.edu, Department of Computing, East Tennessee State University  //
   // Created: Sunday, November 27, 2022                                                                  //
  // Copyright: Scotty Snyder, 2022                                                                      //
 //                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////

using static System.Net.Mime.MediaTypeNames;
using System.Xml.Linq;

namespace Project5
{
    //class dedicated to containing the logic needed to play the game and actually run it
    public class Game_Driver
    {
        //main method 
        public static void Main(string[] args)
        {
            Console.Write("Welcome to Epic Adventure Game! please enter your name: ");
            playerName = Console.ReadLine();
            player = new Person(playerName);
            Console.WriteLine($"Welcome {playerName}! Press any key to start\n");
            Console.ReadKey(true);
            newDungeon.CreateNewDungeon();
            Console.WriteLine(newDungeon);
            Menu();
        }

        #region Variables
        //creates a person object for the player
        public static Person player;
        //creates a new dungeon object for the player to explore
        public static Dungeon newDungeon = new Dungeon();
        //creates a new monster participant
        public static Participant monster;
        //creates a new weapon item
        public static Weapon weapon;
        //creates a new rucksack for the player to store their items
        public static Rucksack playerRucksack = new Rucksack();
        //stores the player's name
        public static string playerName;
        //takes the players input and what they want to do
        public static string playerChoice;
        //creates a new random to generate random numbers with
        public static Random chance = new Random();
        //stores the number randomly generated by chance
        public static int probability;
        #endregion

        #region Methods
        /// <summary>
        /// menu method provides a simple way for the user to interact with the program
        /// </summary>
        public static void Menu()
        {
            Console.WriteLine("What would you like to do?\n\nGO EAST, GO WEST, OPEN RUCKSACK, VIEW CHARACTER");
            playerChoice = Console.ReadLine();

            switch (playerChoice.ToLower())
            {
                case "go east":
                    newDungeon.MoveEast();
                    Console.WriteLine($"{newDungeon}\nRemaing HP: {player.ParticipantHealth}");
                    GetTileInfo();
                    Menu();
                    break;
                case "go west":
                    newDungeon.MoveWest();
                    Console.WriteLine($"{newDungeon}\nRemaing HP: {player.ParticipantHealth}");
                    GetTileInfo();
                    Menu();
                    break;
                case "open rucksack":
                    Console.WriteLine(playerRucksack.DisplayInventory());
                    Menu();
                    break;
                case "view character":
                    Console.WriteLine(player);
                    Menu();
                    break;
                default:
                    Console.WriteLine("\nI can't do that\n");
                    Menu();
                    playerChoice = Console.ReadLine();
                    break;
            }
        }
        /// <summary>
        /// all the needed to create a new monster object called skeleton
        /// </summary>
        public static void SpawnSkeleton()
        {
            monster = new Participant();

            monster.ParticipantName = "Skeleton";
            monster.ParticipantHealth = 20;
            monster.ParticipantWeapon = "Short Sword";
            monster.ParticipantDmg = 4;
        }
        /// <summary>
        /// all the needed to create a new monster object called orc
        /// </summary>
        public static void SpawnOrc()
        {
            monster = new Participant();

            monster.ParticipantName = "Orc";
            monster.ParticipantHealth = 30;
            monster.ParticipantWeapon = "Broadsword";
            monster.ParticipantDmg = 5;
        }
        /// <summary>
        /// all the needed to create a new monster object called troll
        /// </summary>
        public static void SpawnTroll()
        {
            monster = new Participant();

            monster.ParticipantName = "Troll";
            monster.ParticipantHealth = 45;
            monster.ParticipantWeapon = "Club";
            monster.ParticipantDmg = 7;
        }
        /// <summary>
        /// method that determines how likely a certain monster is to spawn
        /// </summary>
        public static void EnemySpawnRate()
        {
            probability = chance.Next(1, 11);

            if (probability <= 6 )
            {
                SpawnSkeleton();
                Console.WriteLine(monster);
            }
            else if (probability <= 9 || probability > 7)
            {
                SpawnOrc();
                Console.WriteLine(monster);
            }
            else if (probability == 10)
            {
                SpawnTroll();
                Console.WriteLine(monster);
            }
        }
        /// <summary>
        /// method that controlls the logic behind battles between monsters and the player
        /// </summary>
        public static void BattleSystem()
        {
            do
            {
                if (chance.Next(1, 11) >= 9)
                {
                    Console.WriteLine($"The {monster.ParticipantName} misses!\n");
                    player.ParticipantHealth -= monster.ParticipantDmg;
                    Console.WriteLine($"{player.ParticipantName}\nHP: {player.ParticipantHealth}");
                }
                else
                {
                    Console.WriteLine($"The {monster.ParticipantName} strikes!\n");
                    player.ParticipantHealth -= monster.ParticipantDmg;
                    Console.WriteLine($"{player.ParticipantName}\nHP: {player.ParticipantHealth}");
                }
                Thread.Sleep(1000);

                if (chance.Next(1, 11) == 1)
                {
                    Console.WriteLine($"You missed!\n");
                    monster.ParticipantHealth -= player.ParticipantDmg;
                    Console.WriteLine($"{monster.ParticipantName}\nHP: {monster.ParticipantHealth}");
                }
                else
                {
                    Console.WriteLine($"You lunge at the enemy!\n");
                    monster.ParticipantHealth -= player.ParticipantDmg;
                    Console.WriteLine($"{monster.ParticipantName}\nHP: {monster.ParticipantHealth}");
                }
                Thread.Sleep(1000);

            } while (monster.ParticipantHealth > 0 && player.ParticipantHealth > 0);

            if (monster.ParticipantHealth <= 0)
            {
                Console.WriteLine($"\nThe {monster.ParticipantName} before me has been slain and the path cleared, it's safe to move on now\n");
                newDungeon.tile.HasMonster = false;
            }
            else if (player.ParticipantHealth <= 0)
            {
                Console.WriteLine($"\nAnother hero has been brought to ruin by these dank catacombs - GAME OVER");
                Environment.Exit(0);
            }

            Thread.Sleep(3500);
            Console.Clear();
            Console.WriteLine(newDungeon);
        }
        /// <summary>
        /// all the needed to create a new weapon object called anduril
        /// </summary>
        public static void Anduril()
        {
            weapon = new Weapon();

            weapon.Name = "Anduril";
            weapon.Description = "A mighty sword with runes you can't quite make out etched along the length of the blade";
            weapon.Weight = 1.5;
            weapon.Damage = 8;
        }
        /// <summary>
        /// all the needed to create a new weapon object called dagger of westernesse
        /// </summary>
        public static void Dagger_of_Westernesse()
        {
            weapon = new Weapon();

            weapon.Name = "Dagger of Westernesse";
            weapon.Description = "An ornate dagger with a leaf-shaped blade and a hilt of gold and red serpents";
            weapon.Weight = 0.5;
            weapon.Damage = 6;
        }
        /// <summary>
        /// all the needed to create a new weapon object called stick
        /// </summary>
        public static void Stick()
        {
            weapon = new Weapon();

            weapon.Name = "Stick";
            weapon.Description = "It's just a stick";
            weapon.Weight = 0.2;
            weapon.Damage = 4;
        }
        /// <summary>
        /// method that determines how likely a certain weapon is to spawn
        /// </summary>
        public static void ItemSpawnRate()
        {
            probability = chance.Next(1, 11);

            if (probability <= 4)
            {
                Stick();
                //Console.WriteLine(weapon);
            }
            else if (probability <= 8 && probability > 4)
            {
                Dagger_of_Westernesse();
                //Console.WriteLine(weapon);
            }
            else if (probability >= 9)
            {
                Anduril();
                //Console.WriteLine(weapon);
            }
        }
        /// <summary>
        /// method that allows the user to pick up a weapon, alter their attack damage, and store it in their rucksack
        /// </summary>
        public static void PickUpWeapon()
        {
            if (weapon.Name == "Anduril")
            {
                Console.WriteLine($"You notice a sword still in it's hilt propped up against the wall. The sword goes by {weapon.Name}, " +
                    $"\nIt's in excellent condition.");
            }
            else
            {
                Console.WriteLine($"You find a {weapon.Name} on the ground");
            }

            playerRucksack.Add(weapon);
            if (weapon.Damage > player.ParticipantDmg) { player.ParticipantDmg = weapon.Damage; }
        }
        /// <summary>
        /// gets information about the tiles and, when applicable, calls the methods to pick up items and start fighting enemies
        /// </summary>
        public static void GetTileInfo()
        {
            if (newDungeon.tile.HasWeapon == true)
            {
                ItemSpawnRate();
                Thread.Sleep(800);
                PickUpWeapon();
                if (weapon.Damage > player.ParticipantDmg) { player.ParticipantWeapon = weapon.Name; }
                newDungeon.tile.HasWeapon = false;
                Thread.Sleep(1500);
            }
            if (newDungeon.tile.HasMonster == true)
            {
                EnemySpawnRate();
                Thread.Sleep(500);
                BattleSystem();
                newDungeon.tile.HasMonster = false;
            }
        }
        #endregion
    }
}